/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

allprojects {

    apply plugin: 'java'

    repositories {

        mavenLocal()
        mavenCentral()

//        maven {
//            url 'https://repo.swim.it/swim-test/'
//            credentials {
//               username testRepositoryUser
//               password testRepositoryPassword
//            }
//            authentication {
//                digest(BasicAuthentication)
//            }
//        }

        maven {
            url 'https://repo.swim.it/swim-public/'
        }
    }

    dependencies {


//        implementation "ai.swim:swim-all:1.2.1.experimental.1"
        implementation "ai.swim:swim-server-client:1.2.1"

    }
}

dependencies {

    implementation project(':server'), project(':client')
}

//
// Application plugin configuration. The application plugin generates shell wrapper scripts
// and packages all required sub-project artifacts and dependencies in a top-level ZIP artifact.
//
apply plugin: 'application'

//
// this generates the client wrapper script
//

task clientStartScript(type: CreateStartScripts) {

    applicationName = 'client'
    mainClassName = 'playground.swim.maplane.client.Main'

    //
    // get the rest of the configuration from the already configured 'startScripts' task;
    // except 'applicationName' and 'mainClassName', the rest of the configuration should
    // be similar
    //
    def t = rootProject.tasks.getByPath('startScripts');
    classpath = t.classpath;
    outputDir = t.outputDir;
}

//
// this configures the main 'startScript' task to generate the server script
//
def t = rootProject.tasks.getByPath('startScripts');
t.applicationName = 'server';
t.mainClassName = 'playground.swim.maplane.server.Main';
t.dependsOn(clientStartScript); // trigger 'clientStartScript' execution automatically


defaultTasks 'distZip'
