#!/usr/bin/env bash

#
# return classpath at stdout. Gradle needs to be configured with a printClasspath task:
#
# task printClasspath {
#        doLast {
#            configurations.runtimeClasspath.each { print it; print ':' }
#        }
# }
#
function get-gradle-runtime-classpath() {

    (cd $(dirname $0)/..; gradle -q printClasspath)
}

#
# The calling script must set MAIN_CLASS. See 'gradle-run-wrapper-template' for an example of such a calling script.
#
function main() {

    local args
    local separator=$'\x1f' # US - unit separator

    while [ -n "$1" ]; do

        if [ "$1" = "-v" -o "$1" = "--verbose" ]; then

            VERBOSE=true

        elif [ "$1" = "-d" -o "$1" = "--debug" ]; then

            VERBOSE=true
            DEBUG=true

        else
            #
            # ... and accumulate the rest of the arguments, separated by the special separator character
            #
            [ -z "${args}" ] && args="$1" || args="${args}${separator}$1"
        fi
        shift
    done

    #
    # re-assemble the command line, by re-initializing the positional parameters, and pass it to the underlying process
    #
    IFS=${separator}
    set - ${args}
    IFS="$(printf ' \t\n')" # restore the standard separators

    [ -z "${MAIN_CLASS}" ] && { echo "MAIN_CLASS variable not defined by the calling script" 1>&2; exit 1; }

    local classpath=$(dirname $0)/../build/classes/java/main
    classpath=${classpath}:$(get-gradle-runtime-classpath) || exit 1

    ${DEBUG} && debug_args="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005";

    java ${debug_args} -cp ${classpath} ${MAIN_CLASS} "$@"
}