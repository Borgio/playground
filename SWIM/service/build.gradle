/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

apply plugin: 'java'
apply plugin: 'application'

repositories {

    mavenLocal()
    maven {
        url 'https://repo.swim.it/swim-test/'
        credentials {
            username testRepositoryUser
            password testRepositoryPassword
        }
        authentication {
            digest(BasicAuthentication)
        }
    }
}

dependencies {

    implementation "ai.swim:swim-all:1.2.1.experimental.1"
}

//
// this generates an additional (not main) wrapper script
//

def startScriptTemplate = './src/main/templates/gradle-application-plugin-script-template'

task secondaryStartScript(type: CreateStartScripts) {

    applicationName = 'client'
    mainClassName = 'io.novaordis.playground.SWIM.service.client.ClientMain'

    //
    // get the rest of the configuration from the already configured 'startScripts' task;
    // except 'applicationName' and 'mainClassName', the rest of the configuration should
    // be similar
    //
    def t = rootProject.tasks.getByPath('startScripts')
    classpath = t.classpath
    outputDir = t.outputDir
    unixStartScriptGenerator.template = resources.text.fromFile(startScriptTemplate)
}

//
// this configures the main 'startScript' task to generate the "main" script
//
def t = rootProject.tasks.getByPath('startScripts')
t.applicationName = 'server'
t.mainClassName = 'io.novaordis.playground.SWIM.service.server.ServerMain'
t.unixStartScriptGenerator.template = resources.text.fromFile(startScriptTemplate)
t.dependsOn(secondaryStartScript) // trigger 'secondaryStartScript' execution automatically


