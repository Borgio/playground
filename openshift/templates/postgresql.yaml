#
# Generic Postgresql template that creates the service, the deployment configuration, and the persistent volume
# claim. To be run as follows:
#
# oc process -f ./generic-postgresql.yaml \
#   --param APPLICATION_NAME=someapp \
#   --param POSTGRESQL_USER=someuser \
#   --param POSTGRESQL_PASSWORD=somepasswd \
#   --param POSTGRESQL_DATABASE=somedb \
#   --param SIZE_GB=2 \
#   --param POSTGRESQL_IMAGE_TAG=9.5 \
#  | oc create -f -
#
apiVersion: v1
kind: Template
labels:
  template: generic-postgresql
metadata:
  name: generic-postgresql
  annotations:
    description: Template that can be used to create the OpenShift infrastructure required to execute a generic Postgresql instance.
message: A Postgresql instance has been initialized in your project.
parameters:
- name: APPLICATION_NAME
  value: test
  description: The name of the application that will use the database. Will be applied to Postgresql objects as a label.
  displayName: A password.
  required: true
- name: POSTGRESQL_USER
  value: testuser
  description: The name of the user to be injected into the Postgresql container as 'POSTGRESQL_USER'.
  displayName: The Postgresql user.
  required: true
- name: POSTGRESQL_PASSWORD
  value: testpassword
  description: The password of the Postgres user, to be injected into the Postgresql container as 'POSTGRESQL_PASSWORD'.
  displayName: The Postgresql user's password.
  required: true
- name: POSTGRESQL_DATABASE
  value: blue
  description: The name of the database to be injected into the Postgresql container as 'POSTGRESQL_DATABASE'
  displayName: The Postgresql database.
  required: true
- name: POSTGRESQL_IMAGE_TAG
  value: "9.5"
  description: The version to be used.
  displayName: The version to be used.
  required: true
- name: SIZE_GB
  value: "2"
  description: The size of the persistent volume claim in Gi.
  displayName: The size of the persistent volume claim.
  required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: ${APPLICATION_NAME}-postgresql
    labels:
      app: ${APPLICATION_NAME}
  spec:
    type: ClusterIP
    sessionAffinity: None
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      deploymentconfig: ${APPLICATION_NAME}-postgresql
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-postgresql
    labels:
      deploymentconfig: ${APPLICATION_NAME}-postgresql
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}-postgresql
    strategy:
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}-postgresql
      spec:
        containers:
        - name: postgresql
          env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 100
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 200m
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: ${APPLICATION_NAME}-postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ${APPLICATION_NAME}-postgresql-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-postgresql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:${POSTGRESQL_IMAGE_TAG}
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${APPLICATION_NAME}-postgresql
    labels:
      app: ${APPLICATION_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${SIZE_GB}Gi
