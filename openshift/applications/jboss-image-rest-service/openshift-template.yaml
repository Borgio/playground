apiVersion: v1
kind: Template
metadata:
  name: jboss-based-rest-service
parameters:
  - name: PUBLIC_WILDCARD_DOMAIN
    required: true
    value: apps.openshift.novaordis.io
objects:
- apiVersion: v1
  kind: ImageStreamImport
  metadata:
    name: jboss-based-rest-service
  spec:
    import: true
    images:
    - from:
        kind: DockerImage
        name: docker.io/novaordis/openshift-jboss-image-and-rest-service:latest
      to:
        name: latest
      importPolicy:
      referencePolicy:
        type:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: jboss-based-rest-service
      instance: rest-service
    name: rest-service
  spec:
    replicas: 1
    selector:
      app: jboss-based-rest-service
      instance: rest-service
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: jboss-based-rest-service
          instance: rest-service
      spec:
        containers:
        - name: rest-service
          image: docker.io/novaordis/openshift-jboss-image-and-rest-service:latest
          imagePullPolicy: Always
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - rest-service
        from:
          kind: ImageStreamTag
          name: jboss-based-rest-service:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    name: rest-service
    labels:
      app: jboss-based-rest-service
      instance: rest-service
  spec:
    ports:
    - name: jboss-http
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      app: jboss-based-rest-service
      instance: rest-service
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    name: rest-service
  spec:
    host: test.${PUBLIC_WILDCARD_DOMAIN}
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: rest-service
    wildcardPolicy: None