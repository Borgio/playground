#
# Sonar template. Depends on a postgres instance that must be created in advance.
#
# oc process -f ./sonar.yaml \
#   --param APPLICATION_NAME=sonar \
#   --param SONARQUBE_JDBC_USERNAME=sonar \
#   --param SONARQUBE_JDBC_PASSWORD=somepasswd \
#   --param POSTGRESQL_DATABASE=sonar \
#   --param POSTGRESQL_SERVICE=sonar-postgresql \
#   --param STORAGE_SIZE_GB=2 \
#   --param SONARQUBE_IMAGE_TAG=9.5 \
#  | oc create -f -
#
apiVersion: v1
kind: Template
labels:
  template: novaordis-sonar
metadata:
  name: novaordis-sonar
  annotations:
    description: Template that can be used to create the OpenShift infrastructure required by a Sonarqube instance.
parameters:
- name: APPLICATION_NAME
  value: sonar
  description: The name of the application that will use the database. Will be applied to Sonarqube objects as a label.
  displayName: The name of the application.
  required: true
- name: SONARQUBE_JDBC_USERNAME
  value: sonar
  description: The name of the Postgresql database user.
  displayName: The Postgresql user.
  required: true
- name: SONARQUBE_JDBC_PASSWORD
  value: testpassword
  description: The password of the Postgresql database user.
  displayName: The Postgresql user's password.
  required: true
- name: POSTGRESQL_DATABASE
  value: sonar
  description: The name of the Postgresql database.
  displayName: The Postgresql database.
  required: true
- name: POSTGRESQL_SERVICE
  value: sonar-postgresql
  description: The name of the Postgresql database service.
  displayName: The Postgresql database service.
  required: true
- name: STORAGE_SIZE_GB
  value: "2"
  description: The size of the persistent volume claim in Gi.
  displayName: The size of the persistent volume claim.
  required: true
- name: SONARQUBE_IMAGE_TAG
  value: "6.5"
  description: The version to be used.
  displayName: The version to be used.
  required: true
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: sonar
    labels:
      app: ${APPLICATION_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: wkulhanek/sonarqube:${SONARQUBE_IMAGE_TAG}
      generation: null
      importPolicy: {}
      name: ${SONARQUBE_IMAGE_TAG}
      referencePolicy:
        type: ""
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - name: sonarqube
          env:
          - name: SONARQUBE_JDBC_USERNAME
            value: sonar
          - name: SONARQUBE_JDBC_PASSWORD
            value: none
          - name: SONARQUBE_JDBC_URL
            value: jdbc:postgresql://${POSTGRESQL_SERVICE}/${POSTGRESQL_DATABASE}
          image: wkulhanek/sonarqube:${SONARQUBE_IMAGE_TAG}
          ports:
          - containerPort: 9000
            protocol: TCP
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          volumeMounts:
          - mountPath: /opt/sonarqube/data
            name: sonarqube
        volumes:
        - name: sonarqube
          persistentVolumeClaim:
            claimName: sonarqube
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - sonarqube
        from:
          kind: ImageStreamTag
          name: sonarqube:${SONARQUBE_IMAGE_TAG}
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: sonarqube
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    - name: 9000-tcp
      port: 9000
      protocol: TCP
      targetPort: 9000
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: sonarqube
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${STORAGE_SIZE_GB}Gi