#
# Gogs template that creates a Gogs instance.
# A Postgresql database must be created before running this template, see:
# https://kb.novaordis.com/index.php/OpenShift_Postgres#Installation
#
# Based on https://github.com/OpenShiftDemos/openshift-cd-demo/blob/ocp-3.6/cicd-template.yaml
#
# Tested with OpenShift 3.6
#

apiVersion: v1
kind: Template
labels:
  template: novaordis-gogs
metadata:
  name: novaordis-gogs
  annotations:
    description: Creates the Gogs OpenShift infrastructure, assuming that Postgresql is already installed.
message: The Gogs infrastructure has been initialized for your project. Gogs username/password are gogs/${GOGS_PASSWORD}.
parameters:
- description: Gogs admin user.
  displayName: Gogs admin user
  value: gogs
  name: GOGS_USER
  required: true
- description: Password for the Gogs user.
  displayName: Gogs Password
  value: password
  name: GOGS_PASSWORD
  required: true
- description: Gogs administrator e-mail.
  displayName: Gogs administrator e-mail
  value: admin@gogs.com
  name: GOGS_ADMIN_EMAIL
  required: true
- displayName: Gogs version
  value: "0.11.29"
  name: GOGS_VERSION
  required: true
#
# POSTGRESQL_USER, POSTGRESQL_PASSWORD and POSTGRESQL_DATABASE are not defined there because they are extracted from
# the database pod's environment
#
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Service
  metadata:
    name: gogs
    annotations:
      description: The Gogs server's http port
    labels:
      app: gogs
  spec:
    type: ClusterIP
    sessionAffinity: None
    ports:
    - name: web
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: gogs
      deploymentconfig: gogs
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for gogs's http service.
    name: gogs
    labels:
      app: gogs
  spec:
    to:
      kind: Service
      name: gogs
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: gogs
    labels:
      app: gogs
  spec:
    tags:
    - annotations:
        description: The Gogs git server docker image
        tags: gogs,go,golang
      from:
        kind: DockerImage
        name: openshiftdemos/gogs:${GOGS_VERSION}
      importPolicy: {}
      name: ${GOGS_VERSION}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: gogs
    name: gogs
  spec:
    replicas: 1
    selector:
      app: gogs
      deploymentconfig: gogs
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: gogs
          deploymentconfig: gogs
      spec:
        containers:
        - image: " "
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          name: gogs
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            requests:
              memory: 256Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 200m
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          volumeMounts:
          - name: gogs-data
            mountPath: /opt/gogs/data
          - name: gogs-config
            mountPath: /etc/gogs/conf
          - name: gogs-custom-config
            mountPath: /opt/gogs/custom/conf
        volumes:
          - name: gogs-data
            persistentVolumeClaim:
              claimName: gogs-data
          - name: gogs-config
            persistentVolumeClaim:
              claimName: gogs-config
          - name: gogs-custom-config
            configMap:
              name: gogs-config
              items:
                - key: app.ini
                  path: app.ini
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - gogs
        from:
          kind: ImageStreamTag
          name: gogs:${GOGS_VERSION}
      type: ImageChange
  status: {}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: gogs-data
    labels:
      app: gogs
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: gogs-config
    labels:
      app: gogs
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: Pod
  metadata:
    name: install-gogs
    labels:
      app: gogs
      job: install-gogs
  spec:
    containers:
    - name: oc
      image: docker.io/openshiftdemos/oc
      command: ["/bin/bash",  "/tmp/installgogs.sh"]
      volumeMounts:
      - name: gogs-install
        mountPath: /tmp/
      resources:
        limits:
          memory: 128Mi
      env:
      - name: CICD_PROJECT
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
    volumes:
      - name: gogs-install
        configMap:
          name: gogs-install
          items:
          - key: installgogs.sh
            path: installgogs.sh
    restartPolicy: Never
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gogs-config
  data:
    app.ini: |
      RUN_MODE = prod
      RUN_USER = ${GOGS_USER}

      [security]
      INSTALL_LOCK = false

      [repository]
      ROOT = /opt/gogs/data/repositories

      [webhook]
      SKIP_TLS_VERIFY = true
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gogs-install
  data:
    installgogs.sh: |
      #!/bin/bash

      set -x

      # Use the oc client to get the url for the gogs route and service
      GOGSSVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')

      echo "GOGSSVC: ${GOGSSVC}"

      GOGSROUTE=$(oc get route gogs -o template --template='{{.spec.host}}')

      echo "GOGSROUTE: ${GOGSROUTE}"

      # Use the oc client to get the postgres variables into the current shell
      eval $(oc env dc/gogs-postgresql --list | grep -v \#)
      #eval $(oc env dc/jenkins --list | grep -v \#)

      # postgres has a readiness probe, so checking if there is at least one
      # endpoint means postgres is alive and ready, so we can then attempt to install gogs
      # we're willing to wait 60 seconds for it, otherwise something is wrong.
      x=1
      oc get ep gogs-postgresql -o yaml | grep "\- addresses:"
      while [ ! $? -eq 0 ]
      do
        sleep 10
        x=$(( $x + 1 ))

        if [ $x -gt 100 ]
        then
          exit 255
        fi

        oc get ep gogs-postgresql -o yaml | grep "\- addresses:"
      done

      # now we wait for gogs to be ready in the same way
      x=1
      oc get ep gogs -o yaml | grep "\- addresses:"
      while [ ! $? -eq 0 ]
      do
        sleep 10
        x=$(( $x + 1 ))

        if [ $x -gt 100 ]
        then
          exit 255
        fi

        oc get ep gogs -o yaml | grep "\- addresses:"
      done

      echo "We might catch the router before it's been updated, so wait 10 more seconds ..."

      sleep 10

      RETURN=$(curl -o /dev/null -sL --post302 -w "%{http_code}" http://$GOGSSVC:3000/install \
      --form db_type=PostgreSQL \
      --form db_host=gogs-postgresql:5432 \
      --form db_user=${POSTGRESQL_USER} \
      --form db_passwd=${POSTGRESQL_PASSWORD} \
      --form db_name=${POSTGRESQL_DATABASE} \
      --form ssl_mode=disable \
      --form db_path=data/gogs.db \
      --form "app_name=Gogs: Go Git Service" \
      --form repo_root_path=/opt/gogs/data/repositories \
      --form run_user=gogs \
      --form domain=localhost \
      --form ssh_port=22 \
      --form http_port=3000 \
      --form app_url=http://${GOGSROUTE}/ \
      --form log_root_path=/opt/gogs/log \
      --form admin_name=${GOGS_USER} \
      --form admin_passwd=${GOGS_PASSWORD} \
      --form admin_confirm_passwd=${GOGS_PASSWORD} \
      --form admin_email=${GOGS_ADMIN_EMAIL})

      if [ $RETURN != "200" ] && [ $RETURN != "302" ]
      then
        echo "ERROR: Failed to initialize Gogs"
        exit 255
      fi

      sleep 10

      # import github repository
      cat <<EOF > /tmp/data.json
      {
        "clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git",
        "uid": 1,
        "repo_name": "openshift-tasks"
      }
      EOF

      RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      -u ${GOGS_USER}:${GOGS_PASSWORD} -X POST http://$GOGSSVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

      if [ $RETURN != "201" ] && [ $RETURN != "200" ]
      then
        echo "ERROR: Failed to imported openshift-tasks GitHub repo"
        exit 255
      fi

      sleep 5

      # add webhook to Gogs to trigger pipeline on push
      cat <<EOF > /tmp/data.json
      {
        "type": "gogs",
        "config": {
          "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_PROJECT/buildconfigs/tasks-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
          "content_type": "json"
        },
        "events": [
          "push"
        ],
        "active": true
      }
      EOF

      RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      -u ${GOGS_USER}:${GOGS_PASSWORD} -X POST http://$GOGSSVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)

      if [ $RETURN != "201" ] && [ $RETURN != "200" ]
      then
        echo "ERROR: Failed to set webhook"
        exit 255
      fi