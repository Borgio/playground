#!/bin/bash

#
# Figures out the class path and the main class and executes it.
#

#
# builds the classpath; first time it is executed caches mvn dependency:build-classpath in
# ./bin/classpath. If the dependency graph changes, we won't detect this automatically,
# we'll have to delete ./bin/classpath by hand.
#
function build-classpath() {


    local lib_dir=$(dirname $0)/../lib
    [ ! -d ${lib_dir} ] && lib_dir=$(dirname $0)/../target
    [ ! -d ${lib_dir} ] && { echo "$(dirname $0)/../lib or $(dirname $0)/../target not found" 1>&2; exit 1; }

    local found=false
    for i in $(find ${lib_dir} -name *.jar); do
        [[ "${i}" =~ -source ]] && continue;
        found=true
        echo -n ${i}
    done

    ${found} || { echo "no *.jar file found in ${lib_dir}" 1>&2; exit 1; }

    #echo -n ":"

    #
    # identify the rest of dependencies; because mvn dependency:build-classpath is costly
    # we run it only once and cache the result. If the dependency graph changes, we won't
    # detect this automatically, we'll have to delete ./bin/classpath by hand.
    #

    #if [ ! -f $(dirname $0)/classpath ]; then
    #    mvn dependency:build-classpath | grep -v "\[INFO\]" | grep -v "\[WARNING\]" >  $(dirname $0)/classpath
    #fi

    #cat $(dirname $0)/classpath
}

function execute() {

    local args=""
    local mode=""
    local verbose=""

    while [ -n "$1" ]; do
        if [ "$1" = "-d" -o  "$1" = "--debug" ]; then
            debug_args="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
        elif [ "$1" = "-v" -o  "$1" = "--verbose" ]; then
            verbose="-Dverbose=true";
        elif [ -z "${mode}" ]; then
            mode=$1
        else
            [ -z "${args}" ] && args=$1 || args="${args} $1"
        fi
        shift
    done

    local cp

    cp=$(build-classpath) || exit 1

    java ${debug_args} ${verbose} -cp ${cp} io.novaordis.playground.java.network.traffic.Main ${mode} ${args}

}