//
//
//

group = 'io.example.blue'
version = '1.0'

def apiArtifactBasename = "blue-api"
def runtimeArtifactBasename = "blue-rt"
def allApiSourcesDirName = "tmp-api-sources"
def allApiClassesDirName = "tmp-api-classes"
def allRuntimeSourcesDirName = "tmp-rt-sources"
def allRuntimeClassesDirName = "tmp-rt-classes"

apply plugin: 'maven-publish'

subprojects {

    ext {

        isApi = project.name.contains("api")
    }

    apply plugin: 'java'

    //
    // Copy the sub-project's sources into a common location in the root project's build directory.
    // All sub-projects will contribute their sources and a root project JAR task will build the
    // corresponding artifact. There's no dependency on anything, since nothing has to be built to
    // copy.
    //
    task copySources(type: Copy) {

        def path = parent.buildDir.path + '/' + (project.isApi ? allApiSourcesDirName : allRuntimeSourcesDirName)

        from 'src/main/java'
        into path

        doLast {

            println "copied from src/main/java to $path"
        }
    }

    //
    // Copy the sub-project's compiled classes into a common location in the root project's build directory.
    // All sub-projects will contribute their classes and a root project JAR task will build the corresponding
    // artifact. The task depends on 'build', as we need to compile the classes first.
    //
    task copyClasses(type: Copy) {

        dependsOn 'build'

        def path = parent.buildDir.path + '/' + (project.isApi ? allApiClassesDirName : allRuntimeClassesDirName)

        from 'build/classes/java/main'
        into path

        doLast {

            println "copied from src/main/java to $path"
        }
    }
}

task apiSources(type: Jar) {

    destinationDir = buildDir
    baseName = apiArtifactBasename
    classifier = 'sources'
    from buildDir.path + '/' + allApiSourcesDirName
}

task apiClasses(type: Jar) {

    destinationDir = buildDir
    baseName = apiArtifactBasename
    from buildDir.path + '/' + allApiClassesDirName
}

task runtimeSources(type: Jar) {

    destinationDir = buildDir
    baseName = runtimeArtifactBasename
    classifier = 'sources'
    from buildDir.path + '/' + allRuntimeSourcesDirName
}

task runtimeClasses(type: Jar) {

    destinationDir = buildDir
    baseName = runtimeArtifactBasename
    from buildDir.path + '/' + allRuntimeClassesDirName
}

publishing {

    publications {

        api(MavenPublication) {

            artifactId apiArtifactBasename
            artifact apiSources
            artifact apiClasses
        }

        runtime(MavenPublication) {

            artifactId runtimeArtifactBasename
            artifact runtimeSources
            artifact runtimeClasses
        }
    }

    repositories {

        mavenLocal()
    }
}

task clean(type: Delete) {

    delete 'build'
}

task debugPublish {
    dependsOn 'publish'
    doFirst {
        println "Tasks in Task Execution Graph, in execution order: " + gradle.taskGraph.allTasks
    }
}